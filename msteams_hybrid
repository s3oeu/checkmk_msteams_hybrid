#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Microsoft Teams - Hybrid Notification Script for CheckMK
# --------------- 
# Day: immediate notification, Night: cache only, manual flush possible
#
# DocuUrl: https://github.com/s3oeu/checkmk_msteams_hybrid/edit/main/README.md
#
# Parameter1:  Webhook-URL
# Parameter2:  Cache directory (override DEFAULT_CACHE_DIR)
# Parameter3:  Log file        (override DEFAULT_LOG_FILE)
# Parameter4:  Night mode start (HH:MM or hour)
# Parameter5:  Night mode end   (HH:MM or hour)
# Parameter6:  Weekend start    (HH:MM or hour)
# Parameter7:  Weekend end      (HH:MM or hour)
# Parameter8:  Hosts to ignore on weekends (comma separated hostnames)
# Parameter9:  Hosts to ALWAYS notify (comma separated hostnames)
#
# Bulk: yes

import os
import sys
import json
import logging
import requests
import re
from datetime import datetime, timedelta, time

def get_shortname(hostname):
    """Returns the part before the first dot in uppercase."""
    return hostname.split('.')[0].upper()

# ---------------------------------------------------------------------
# Defaults and constants
# ---------------------------------------------------------------------
DEFAULT_WEBHOOK       = ""
DEFAULT_CACHE_DIR     = "/opt/omd/sites/monitoring/tmp/teams_cache"
DEFAULT_LOG_FILE      = "/opt/omd/sites/monitoring/var/log/teams_hybrid.log"
DEFAULT_NIGHT_FROM    = time(22, 0)
DEFAULT_NIGHT_TO      = time(7,  0)
DEFAULT_WEEKEND_FROM  = time(10, 0)
DEFAULT_WEEKEND_TO    = time(20, 0)

# ---------------------------------------------------------------------
# Status colors & icons
# ---------------------------------------------------------------------
COLORS = {
    "CRITICAL": "#EE0000", "DOWN":       "#EE0000",
    "WARNING":  "#FFDD00",
    "OK":       "#00CC00", "UP":         "#00CC00",
    "UNKNOWN":  "#FFA500","UNREACHABLE":"#FFA500",
}
ICONS = {
    "CRITICAL": "üü•", "DOWN":       "üü•",
    "WARNING":  "üü®",
    "OK":       "üü©", "UP":         "üü©",
    "UNKNOWN":  "üüß","UNREACHABLE":"üüß",
}

# ---------------------------------------------------------------------
# Logging setup (console + file), both with timestamp
# ---------------------------------------------------------------------
LOG_FORMAT = "%(asctime)s - %(levelname)s - %(message)s"

def setup_console_logging():
    root = logging.getLogger()
    root.setLevel(logging.INFO)
    if not any(isinstance(h, logging.StreamHandler) for h in root.handlers):
        sh = logging.StreamHandler()
        sh.setLevel(logging.INFO)
        sh.setFormatter(logging.Formatter(LOG_FORMAT))
        root.addHandler(sh)

def setup_file_logging(log_file):
    os.makedirs(os.path.dirname(log_file), exist_ok=True)
    fh = logging.FileHandler(log_file)
    fh.setLevel(logging.INFO)
    fh.setFormatter(logging.Formatter(LOG_FORMAT))
    logging.getLogger().addHandler(fh)

setup_console_logging()
logger = logging.getLogger()

# ---------------------------------------------------------------------
# Time parsing (PARAM_4‚Äì7)
# ---------------------------------------------------------------------
def parse_time(val, fallback):
    if not val:
        return fallback
    try:
        return time.fromisoformat(val)
    except:
        pass
    if val.isdigit() and 0 <= int(val) < 24:
        return time(int(val), 0)
    logger.warning(f"‚ö†Ô∏è Invalid time format '{val}', using {fallback}")
    return fallback

# ---------------------------------------------------------------------
# Notification helpers
# ---------------------------------------------------------------------
def get_type(ctx):
    return "SERVICE" if "SERVICEDESC" in ctx else "HOST"

def get_state(ctx):
    key = "SERVICESTATE" if get_type(ctx)=="SERVICE" else "HOSTSTATE"
    return ctx.get(key, "UNKNOWN")

def get_colored_status(state):
    return f"{ICONS.get(state,'‚¨ú')} {state}"

def adjust_time(ctx, state):
    ts = ctx.get("SHORTDATETIME")
    if ts and state in ("WARNING","CRITICAL"):
        try:
            d = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S") - timedelta(minutes=5)
            return d.strftime("%Y-%m-%d %H:%M:%S")
        except:
            pass
    return ts or datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# ---------------------------------------------------------------------
# Cache filename (host and service)
# ---------------------------------------------------------------------
def make_cache_filename(ctx):
    host = ctx.get("HOSTNAME","unknown")
    safe_host = re.sub(r"[^\w\.-]","_", host)
    if "SERVICEDESC" in ctx:
        svc = ctx.get("SERVICEDESC","")
        safe_svc = re.sub(r"[^\w\.-]","_", svc)
        return f"{safe_host}__{safe_svc}.json"
    return f"{safe_host}.json"

def cache_path(ctx, cache_dir):
    ensure_cache_dir(cache_dir)
    return os.path.join(cache_dir, make_cache_filename(ctx))

def ensure_cache_dir(cd):
    os.makedirs(cd, exist_ok=True)

# ---------------------------------------------------------------------
# Night start calculation
# ---------------------------------------------------------------------
def get_night_start(now, night_from, night_to):
    if night_from <= night_to:
        return datetime.combine(now.date(), night_from)
    if now.time() >= night_from:
        return datetime.combine(now.date(), night_from)
    return datetime.combine(now.date() - timedelta(days=1), night_from)

# ---------------------------------------------------------------------
# Caching logic with OK marker only at night
# ---------------------------------------------------------------------
def save_context_to_cache(ctx, cd):
    # Save ignore and always hosts in the context (if set)
    ctx['PARAMETER_8'] = ctx.get('PARAMETER_8', os.environ.get("NOTIFY_PARAMETER_8", ""))
    ctx['PARAMETER_9'] = ctx.get('PARAMETER_9', os.environ.get("NOTIFY_PARAMETER_9", ""))
    p = cache_path(ctx, cd)
    with open(p, "w") as f:
        json.dump(ctx, f)
    logger.info(f"üíæ cached: {p}")

def delete_cache_if_ok(ctx, cd, night_from, is_night):
    p = cache_path(ctx, cd)
    if get_state(ctx) in ("OK","UP") and os.path.exists(p):
        try:
            old = json.load(open(p))
        except:
            old = {}

        cached_at_night = old.get("CACHED_DURING_NIGHT")
        if cached_at_night is not None and cached_at_night:
            logger.info(f"‚ÑπÔ∏è No OK-marker set (problem was originally cached during NIGHT/quiet hours): {p}")
            os.remove(p)
            return

        if is_night:
            night_start = get_night_start(datetime.now(), night_from, DEFAULT_NIGHT_TO)
            dt_old = None
            if old.get("SHORTDATETIME"):
                try:
                    dt_old = datetime.strptime(old["SHORTDATETIME"], "%Y-%m-%d %H:%M:%S")
                except:
                    pass
            if dt_old and dt_old < night_start:
                ok_fn = "ok_" + make_cache_filename(ctx)
                with open(os.path.join(cd, ok_fn), "w") as f:
                    json.dump(ctx, f)
                logger.info(f"üíæ OK-marker set: {ok_fn}")
        else:
            logger.info(f"üßπ Day mode: Cache deleted: {p}")
        os.remove(p)


# ---------------------------------------------------------------------
# Flush: delete OK marker + only send problem caches,
#        Ignored hosts & Always-notify are checked centrally
# ---------------------------------------------------------------------
def flush_cache(cache_dir, night_from, ignore_hosts, always_hosts):
    ensure_cache_dir(cache_dir)
    now = datetime.now()
    is_weekend = now.weekday() >= 5
    files      = [f for f in os.listdir(cache_dir) if f.endswith('.json')]
    ok_files   = [f for f in files if f.startswith('ok_')]
    prob_files = [f for f in files if not f.startswith('ok_')]

    # ENV takes precedence! If not set, use union of all cached ignore/always-hosts
    env_ignore = os.environ.get("NOTIFY_PARAMETER_8", "")
    env_always = os.environ.get("NOTIFY_PARAMETER_9", "")
    if env_ignore.strip():
        ignore_hosts = [get_shortname(h.strip()) for h in env_ignore.split(",") if h.strip()]
    else:
        ignore_hosts_set = set()
        for fn in files:
            try:
                with open(os.path.join(cache_dir, fn)) as f:
                    ctx = json.load(f)
            except Exception:
                continue
            for h in ctx.get("PARAMETER_8","").split(","):
                if h.strip():
                    ignore_hosts_set.add(get_shortname(h.strip()))
        ignore_hosts = list(ignore_hosts_set)

    if env_always.strip():
        always_hosts = [get_shortname(h.strip()) for h in env_always.split(",") if h.strip()]
    else:
        always_hosts_set = set()
        for fn in files:
            try:
                with open(os.path.join(cache_dir, fn)) as f:
                    ctx = json.load(f)
            except Exception:
                continue
            for h in ctx.get("PARAMETER_9","").split(","):
                if h.strip():
                    always_hosts_set.add(get_shortname(h.strip()))
        always_hosts = list(always_hosts_set)

    if not ok_files and not prob_files:
        logger.info("‚ÑπÔ∏è No cached alarms to flush")
        sys.exit(0)

    # Send and delete OK marker
    for fn in ok_files:
        path = os.path.join(cache_dir, fn)
        ctx  = json.load(open(path))
        host = get_shortname(fn[3:-5].split("__",1)[0])
        logger.info(f"DEBUG(Flush): Host={host} | Ignore list={ignore_hosts} | is_weekend={is_weekend}")
        if host in always_hosts:
            logger.info(f"üî• Always-Notify (Flush): {host}")
            send_notification(ctx)
            logger.info(f"‚úÖ OK-Flush (Always): {fn}")
        elif is_weekend and host in ignore_hosts:
            logger.info(f"üö´ Flush-ignore OK for {host} (weekend)")
        else:
            send_notification(ctx)
            logger.info(f"‚úÖ OK-Flush: {fn}")
        os.remove(path)

    # Send problem caches, do NOT delete
    for fn in prob_files:
        path = os.path.join(cache_dir, fn)
        ctx  = json.load(open(path))
        host = get_shortname(fn[:-5].split("__",1)[0])
        # DEBUG:
        # logger.info(f"DEBUG(Flush): Host={host} | Ignore list={ignore_hosts} | is_weekend={is_weekend}")
        if host in always_hosts:
            logger.info(f"üî• Always-Notify (Flush): {host}")
            send_notification(ctx)
            logger.info(f"‚úÖ Problem-Flush (Always): {fn}")
        elif is_weekend and host in ignore_hosts:
            logger.info(f"üö´ Flush-ignore problem for {host} (weekend)")
        else:
            send_notification(ctx)
            logger.info(f"‚úÖ Problem-Flush: {fn}")

    sys.exit(0)

# ---------------------------------------------------------------------
# Context parsing
# ---------------------------------------------------------------------
def _decode_blocks(raw):
    blocks, cur = [], {}
    for l in raw.splitlines():
        if not l.strip():
            if cur: blocks.append(cur); cur={}
            continue
        k,_,v = l.partition("=")
        cur[k] = v.replace("\a","\n")
    if cur: blocks.append(cur)
    return blocks

def contexts_from_stdin():
    raw=sys.stdin.read()
    if not raw.strip(): return []
    gv,*ev = _decode_blocks(raw)
    return [
      {**{k[7:]:v for k,v in gv.items() if k.startswith("NOTIFY_")},
       **{k[7:]:v for k,v in e.items()  if k.startswith("NOTIFY_")}}
      for e in ev
    ]

def context_from_env():
    return [{k[7:]:v for k,v in os.environ.items() if k.startswith("NOTIFY_") }]

# ---------------------------------------------------------------------
# Teams message builder
# ---------------------------------------------------------------------
def build_facts(ctx):
    t     = get_type(ctx)
    state = get_state(ctx)
    prev  = ctx.get(f"PREVIOUS{t}HARDSTATE") or ctx.get(f"LAST{t}STATE")
    host  = ctx.get("HOSTALIAS", ctx.get("HOSTNAME","UNKNOWN"))
    when  = adjust_time(ctx, state)
    line  = (f"{get_colored_status(prev)} ‚ûú {get_colored_status(state)}"
             if prev else get_colored_status(state))
    facts=[]
    if t=="SERVICE":
        facts += [
          {"name":"Check:\u2003\u2003","value":ctx.get("SERVICEDESC","Unknown")},
          {"name":"Status:\u2003\u2002\u2002","value":line},
        ]
    else:
        facts += [
          {"name":"Server:\u2003\u2003","value":host},
          {"name":"Status:\u2003\u2002\u2002","value":line},
        ]
    facts.append({"name":"Time:\u2003\u2003\u2002","value":when})
    if ctx.get("NOTIFICATIONCOMMENT"):
        facts.extend([
          {"name":"-------------","value":"-------------"},
          {"name":"Comment:\u2003","value":ctx["NOTIFICATIONCOMMENT"]},
        ])
    if state not in ("OK","UP"):
        facts.extend([
          {"name":"-------------","value":"-------------"},
          {"name":"Details:\u2003\u2002\u2009","value":ctx.get(f"{t}OUTPUT","No further info.")},
        ])
    return facts

def single_card(ctx):
    state   = get_state(ctx)
    color   = COLORS.get(state,"#CCCCCC")
    host    = ctx.get("HOSTALIAS", ctx.get("HOSTNAME","UNKNOWN"))
    summary = (f"{host} ‚Äì {ctx.get('SERVICEDESC','')} ‚Äì {state}"
               if get_type(ctx)=="SERVICE" else f"{host} ‚Äì {state}")
    return {
      "@type":"MessageCard","@context":"https://schema.org/extensions",
      "summary":summary,"themeColor":color,
      "sections":[{"activityTitle":host,
                   "activitySubtitle":f"{get_type(ctx).capitalize()} Notification",
                   "activityImage":"https://ticket.protones.de/images/pt-checkmk-teams.png",
                   "facts":build_facts(ctx)}]
    }

def send_notification(ctx):
    url = ctx.get("PARAMETER_1") or DEFAULT_WEBHOOK
    if not url:
        logger.error("‚ùå PARAMETER_1 (Webhook) missing")
        return
    card = single_card(ctx)
    try:
        r = requests.post(url,json=card,timeout=10)
        r.raise_for_status()
        logger.info(f"‚úÖ sent: {ctx.get('HOSTNAME')} / {ctx.get('SERVICEDESC','')}")
    except Exception as e:
        logger.error(f"‚ùå Sending failed: {e}")

# ---------------------------------------------------------------------
# Main
# ---------------------------------------------------------------------
def main():
    global logger

    # Manual flush before stdin
    if len(sys.argv)>1 and sys.argv[1]=="--flush":
        cfg = context_from_env()[0]
        cache_dir  = cfg.get("PARAMETER_2", DEFAULT_CACHE_DIR)
        log_file   = cfg.get("PARAMETER_3", DEFAULT_LOG_FILE)
        night_from = parse_time(cfg.get("PARAMETER_4",""), DEFAULT_NIGHT_FROM)
        # Read ignore hosts & always-notify hosts centrally
        ignore_hosts  = [get_shortname(h.strip()) for h in cfg.get("PARAMETER_8","" ).split(",") if h.strip()]
        always_hosts  = [get_shortname(h.strip()) for h in cfg.get("PARAMETER_9","" ).split(",") if h.strip()]
        setup_file_logging(log_file)
        logger.info("‚è∞ Starting manual flush")
        flush_cache(cache_dir, night_from, ignore_hosts, always_hosts)

    contexts = contexts_from_stdin() or context_from_env()
    if not contexts:
        logger.error("‚ùå No notification data received")
        sys.exit(2)

    cfg           = contexts[0]
    cache_dir     = cfg.get("PARAMETER_2", DEFAULT_CACHE_DIR)
    log_file      = cfg.get("PARAMETER_3", DEFAULT_LOG_FILE)
    night_from    = parse_time(cfg.get("PARAMETER_4",""), DEFAULT_NIGHT_FROM)
    night_to      = parse_time(cfg.get("PARAMETER_5",""), DEFAULT_NIGHT_TO)
    weekend_from  = parse_time(cfg.get("PARAMETER_6",""), DEFAULT_WEEKEND_FROM)
    weekend_to    = parse_time(cfg.get("PARAMETER_7",""), DEFAULT_WEEKEND_TO)
    ignore_hosts  = [get_shortname(h.strip()) for h in cfg.get("PARAMETER_8","" ).split(",") if h.strip()]
    always_hosts  = [get_shortname(h.strip()) for h in cfg.get("PARAMETER_9","" ).split(",") if h.strip()]

    setup_file_logging(log_file)
    logger = logging.getLogger()

    now        = datetime.now()
    tnow       = now.time()
    weekday    = now.weekday()
    is_weekend = weekday >= 5

    day_ok     = (tnow >= night_to and tnow < night_from)
    we_ok      = (tnow >= weekend_from and tnow < weekend_to)

    for ctx in contexts:
        host  = get_shortname(ctx.get("HOSTNAME","unknown"))
        state = get_state(ctx)
        # DEBUG:
        # logger.info(f"DEBUG: Host={host} | Ignore list={ignore_hosts} | is_weekend={is_weekend}")

        # Always-Notify
        if host in always_hosts:
            logger.info(f"üî• Always-Notify: {host}/{ctx.get('SERVICEDESC','')}")
            send_notification(ctx)
            delete_cache_if_ok(ctx, cache_dir, night_from, False)
            continue

        # Weekend-ignore: notify not sent, but still cache
        if is_weekend and host in ignore_hosts:
            logger.info(f"üö´ Weekend-ignore: {host} (will still be cached)")
            if state not in ("OK", "UP"):
                ctx['CACHED_DURING_NIGHT'] = True
                save_context_to_cache(ctx, cache_dir)
            else:
                delete_cache_if_ok(ctx, cache_dir, night_from, True)
            continue

        allowed  = we_ok if is_weekend else day_ok
        is_night = not allowed

        if allowed:
            send_notification(ctx)
            delete_cache_if_ok(ctx, cache_dir, night_from, False)
            if state not in ("OK", "UP"):
                ctx['CACHED_DURING_NIGHT'] = False
                save_context_to_cache(ctx, cache_dir)
        else:
            if state not in ("OK", "UP"):
                ctx['CACHED_DURING_NIGHT'] = True
                save_context_to_cache(ctx, cache_dir)
            else:
                delete_cache_if_ok(ctx, cache_dir, night_from, True)

    sys.exit(0)

if __name__ == "__main__":
    main()
